# -*- coding: utf-8 -*-
"""mini_project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bPqrZwHki8dsvwZpPn_aZTC3SXC7JqOE
"""



#importing
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt


df=pd.read_csv("C:\mini_project\smoking.csv.zip")

df.shape

df

df.isnull().sum()

#Handling Missing Values
df["gender"]=df["gender"].map({"F":0 , "M":1}).astype(int)

df["tartar"]=df["tartar"].map({"N":0 , "Y":1}).astype(int)

df["oral"]=df["oral"].map({"Y":0 }).astype(int)

df.head()

df.describe()

#Data Visualization
#Unnivariate Analysis
plt.figure(figsize=[5,5],clear=True,facecolor="#ABB2B9")
df["smoking"].value_counts().plot.pie(explode=[0,0.15],autopct="%1.3f%%",shadow=True);

df.tail()

df.head()

#Bivariate Analysis
sns.scatterplot(x='smoking',y='hemoglobin',data=df)
plt.show()

corrHeatMap=df.corr(numeric_only =True).round(1)
plt.figure(figsize=(10, 8))
sns.heatmap(corrHeatMap,cmap='RdBu',annot=True)
plt.show()

sns.catplot(x="tartar",kind="count",data=df)

sns.catplot(x='gender',kind='count',data=df)

df.columns

columns=list(df)
columns

x=pd.get_dummies(df)
x.head()

for i in x.columns:
    plt.figure()
    hist1,edges1=np.histogram(x[i])
    plt.bar(edges1[:-1],hist1,width=edges1[1:]-edges1[:-1],color='m')
    plt.xlabel(i)
    plt.show()

#Handling Outliers in Data
for i in df.columns:
  df[[i]].boxplot()
  plt.show()

IQR=df['age'].quantile(0.75)-df['age'].quantile(0.25)
IQR

lowerBound=df['age'].quantile(0.25)-(1.5*IQR)
lowerBound

upperBound=df['age'].quantile(0.75)+(1.5*IQR)
upperBound

df['age']=np.where(df['age']>upperBound,upperBound,df['age'])
df['age']=np.where(df['age']<lowerBound,lowerBound,df['age'])

sns.boxplot(df['age'])

IQR=df['height(cm)'].quantile(0.75)-df['height(cm)'].quantile(0.25)
IQR

lowerBound=df['height(cm)'].quantile(0.25)-(1.5*IQR)
lowerBound

upperBound=df['height(cm)'].quantile(0.75)+(1.5*IQR)
upperBound

df['height(cm)']=np.where(df['height(cm)']>upperBound,upperBound,df['height(cm)'])
df['height(cm)']=np.where(df['height(cm)']<lowerBound,lowerBound,df['height(cm)'])

sns.boxplot(df['height(cm)'])

IQR=df['weight(kg)'].quantile(0.75)-df['weight(kg)'].quantile(0.25)
IQR

lowerBound=df['weight(kg)'].quantile(0.25)-(1.5*IQR)
lowerBound

upperBound=df['weight(kg)'].quantile(0.75)+(1.5*IQR)
upperBound

df['weight(kg)']=np.where(df['weight(kg)']>upperBound,upperBound,df['weight(kg)'])
df['weight(kg)']=np.where(df['weight(kg)']<lowerBound,lowerBound,df['weight(kg)'])

sns.boxplot(df['weight(kg)'])

IQR=df['waist(cm)'].quantile(0.75)-df['waist(cm)'].quantile(0.25)
IQR

lowerBound=df['waist(cm)'].quantile(0.25)-(1.5*IQR)
lowerBound

upperBound=df['waist(cm)'].quantile(0.75)+(1.5*IQR)
upperBound

df['waist(cm)']=np.where(df['waist(cm)']>upperBound,upperBound,df['waist(cm)'])
df['waist(cm)']=np.where(df['waist(cm)']<lowerBound,lowerBound,df['waist(cm)'])

sns.boxplot(df['waist(cm)'])

IQR=df['eyesight(left)'].quantile(0.75)-df['eyesight(left)'].quantile(0.25)
IQR

lowerBound=df['eyesight(left)'].quantile(0.25)-(1.5*IQR)
lowerBound

upperBound=df['eyesight(left)'].quantile(0.75)+(1.5*IQR)
upperBound

df['eyesight(left)']=np.where(df['eyesight(left)']>upperBound,upperBound,df['eyesight(left)'])
df['eyesight(left)']=np.where(df['eyesight(left)']<lowerBound,lowerBound,df['eyesight(left)'])

sns.boxplot(df['eyesight(left)'])

IQR=df['eyesight(right)'].quantile(0.75)-df['eyesight(right)'].quantile(0.25)
IQR

lowerBound=df['eyesight(right)'].quantile(0.25)-(1.5*IQR)
lowerBound

upperBound=df['eyesight(right)'].quantile(0.75)+(1.5*IQR)
upperBound

df['eyesight(right)']=np.where(df['eyesight(right)']>upperBound,upperBound,df['eyesight(right)'])
df['eyesight(right)']=np.where(df['eyesight(right)']<lowerBound,lowerBound,df['eyesight(right)'])

sns.boxplot(df['eyesight(right)'])

IQR=df['hearing(right)'].quantile(0.75)-df['hearing(right)'].quantile(0.25)
IQR

lowerBound=df['hearing(right)'].quantile(0.25)-(1.5*IQR)
lowerBound

upperBound=df['hearing(right)'].quantile(0.75)+(1.5*IQR)
upperBound

df['hearing(right)']=np.where(df['hearing(right)']>upperBound,upperBound,df['hearing(right)'])
df['hearing(right)']=np.where(df['hearing(right)']<lowerBound,lowerBound,df['hearing(right)'])

sns.boxplot(df['hearing(right)'])

IQR=df['hearing(left)'].quantile(0.75)-df['hearing(left)'].quantile(0.25)
IQR

lowerBound=df['hearing(left)'].quantile(0.25)-(1.5*IQR)
lowerBound

upperBound=df['hearing(left)'].quantile(0.75)+(1.5*IQR)
upperBound

df['hearing(left)']=np.where(df['hearing(left)']>upperBound,upperBound,df['hearing(left)'])
df['hearing(left)']=np.where(df['hearing(left)']<lowerBound,lowerBound,df['hearing(left)'])

sns.boxplot(df['hearing(left)'])

IQR=df['systolic'].quantile(0.75)-df['systolic'].quantile(0.25)
IQR

lowerBound=df['systolic'].quantile(0.25)-(1.5*IQR)
lowerBound

upperBound=df['systolic'].quantile(0.75)+(1.5*IQR)
upperBound

df['systolic']=np.where(df['systolic']>upperBound,upperBound,df['systolic'])
df['systolic']=np.where(df['systolic']<lowerBound,lowerBound,df['systolic'])

sns.boxplot(df['systolic'])

sns.boxplot(df['Cholesterol'])

IQR=df['relaxation'].quantile(0.75)-df['relaxation'].quantile(0.25)
IQR

lowerBound=df['relaxation'].quantile(0.25)-(1.5*IQR)
lowerBound

upperBound=df['relaxation'].quantile(0.75)+(1.5*IQR)
upperBound

df['relaxation']=np.where(df['relaxation']>upperBound,upperBound,df['relaxation'])
df['relaxation']=np.where(df['relaxation']<lowerBound,lowerBound,df['relaxation'])

sns.boxplot(df['relaxation'])

IQR=df['fasting blood sugar'].quantile(0.75)-df['fasting blood sugar'].quantile(0.25)
IQR

lowerBound=df['fasting blood sugar'].quantile(0.25)-(1.5*IQR)
lowerBound

upperBound=df['fasting blood sugar'].quantile(0.75)+(1.5*IQR)
upperBound

df['fasting blood sugar']=np.where(df['fasting blood sugar']>upperBound,upperBound,df['fasting blood sugar'])
df['fasting blood sugar']=np.where(df['fasting blood sugar']<lowerBound,lowerBound,df['fasting blood sugar'])

sns.boxplot(df['fasting blood sugar'])

IQR=df['Cholesterol'].quantile(0.75)-df['Cholesterol'].quantile(0.25)
IQR

lowerBound=df['Cholesterol'].quantile(0.25)-(1.5*IQR)
lowerBound

upperBound=df['Cholesterol'].quantile(0.75)+(1.5*IQR)
upperBound

df['Cholesterol']=np.where(df['Cholesterol']>upperBound,upperBound,df['Cholesterol'])
df['Cholesterol']=np.where(df['Cholesterol']<lowerBound,lowerBound,df['Cholesterol'])

sns.boxplot(df['Cholesterol'])

IQR=df['triglyceride'].quantile(0.75)-df['triglyceride'].quantile(0.25)
IQR

lowerBound=df['triglyceride'].quantile(0.25)-(1.5*IQR)
lowerBound

upperBound=df['triglyceride'].quantile(0.75)+(1.5*IQR)
upperBound

df['triglyceride']=np.where(df['triglyceride']>upperBound,upperBound,df['triglyceride'])
df['triglyceride']=np.where(df['triglyceride']<lowerBound,lowerBound,df['triglyceride'])

sns.boxplot(df['triglyceride'])

IQR=df['hemoglobin'].quantile(0.75)-df['hemoglobin'].quantile(0.25)
IQR

lowerBound=df['hemoglobin'].quantile(0.25)-(1.5*IQR)
lowerBound

upperBound=df['hemoglobin'].quantile(0.75)+(1.5*IQR)
upperBound

df['hemoglobin']=np.where(df['hemoglobin']>upperBound,upperBound,df['hemoglobin'])
df['hemoglobin']=np.where(df['hemoglobin']<lowerBound,lowerBound,df['hemoglobin'])

sns.boxplot(df['hemoglobin'])

IQR=df['Urine protein'].quantile(0.75)-df['Urine protein'].quantile(0.25)
IQR

lowerBound=df['Urine protein'].quantile(0.25)-(1.5*IQR)
lowerBound

upperBound=df['Urine protein'].quantile(0.75)+(1.5*IQR)
upperBound

df['Urine protein']=np.where(df['Urine protein']>upperBound,upperBound,df['Urine protein'])
df['Urine protein']=np.where(df['Urine protein']<lowerBound,lowerBound,df['Urine protein'])

sns.boxplot(df['Urine protein'])

IQR=df['serum creatinine'].quantile(0.75)-df['serum creatinine'].quantile(0.25)
IQR

lowerBound=df['serum creatinine'].quantile(0.25)-(1.5*IQR)
lowerBound

upperBound=df['serum creatinine'].quantile(0.75)+(1.5*IQR)
upperBound

df['serum creatinine']=np.where(df['serum creatinine']>upperBound,upperBound,df['serum creatinine'])
df['serum creatinine']=np.where(df['serum creatinine']<lowerBound,lowerBound,df['serum creatinine'])

sns.boxplot(df['serum creatinine'])

IQR=df['AST'].quantile(0.75)-df['AST'].quantile(0.25)
IQR

lowerBound=df['AST'].quantile(0.25)-(1.5*IQR)
lowerBound

upperBound=df['AST'].quantile(0.75)+(1.5*IQR)
upperBound

df['AST']=np.where(df['AST']>upperBound,upperBound,df['AST'])
df['AST']=np.where(df['AST']<lowerBound,lowerBound,df['AST'])

sns.boxplot(df['AST'])

IQR=df['ALT'].quantile(0.75)-df['ALT'].quantile(0.25)
IQR

lowerBound=df['ALT'].quantile(0.25)-(1.5*IQR)
lowerBound

upperBound=df['ALT'].quantile(0.75)+(1.5*IQR)
upperBound

df['ALT']=np.where(df['ALT']>upperBound,upperBound,df['ALT'])
df['ALT']=np.where(df['ALT']<lowerBound,lowerBound,df['ALT'])

sns.boxplot(df['ALT'])

IQR=df['Gtp'].quantile(0.75)-df['Gtp'].quantile(0.25)
IQR

lowerBound=df['Gtp'].quantile(0.25)-(1.5*IQR)
lowerBound

upperBound=df['Gtp'].quantile(0.75)+(1.5*IQR)
upperBound

df['Gtp']=np.where(df['Gtp']>upperBound,upperBound,df['Gtp'])
df['Gtp']=np.where(df['Gtp']<lowerBound,lowerBound,df['Gtp'])

sns.boxplot(df['Gtp'])

IQR=df['dental caries'].quantile(0.75)-df['dental caries'].quantile(0.25)
IQR

lowerBound=df['dental caries'].quantile(0.25)-(1.5*IQR)
lowerBound

upperBound=df['dental caries'].quantile(0.75)+(1.5*IQR)
upperBound

df['dental caries']=np.where(df['dental caries']>upperBound,upperBound,df['dental caries'])
df['dental caries']=np.where(df['dental caries']<lowerBound,lowerBound,df['dental caries'])

sns.boxplot(df['dental caries'])

"""DATA PREPROCESSING"""

#Seperating Data For Training and Testing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

x=df.drop(['smoking'],axis=1)
y=df['smoking']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,random_state=1)

from sklearn.preprocessing import MinMaxScaler,RobustScaler,StandardScaler

scaler=MinMaxScaler()
scaler.fit(x_train)
x_train=scaler.transform(x_train)
x_test=scaler.transform(x_test)



sc=StandardScaler()
sc

x=sc.fit_transform(x)
x

clf=LogisticRegression()
clf

clf.fit(x_train,y_train)

pred=clf.predict(x_test)
pred

y_test

clf.score(x_test,y_test)*100



clf.predict([[1,1,40,155,60,81.3,1.2,1,1,1,114,73,94,215,82,73,126,12.9,1,0.7,18,19,27,1,0,1]])

from sklearn.metrics import confusion_matrix
confmat = confusion_matrix(y_test, pred)

# Print the confusion matrix
print(confmat)
import pickle

filename = 'smoke_model.pkl'

pickle.dump(clf,open(filename,'wb'))

pickle.load(open('smoke_model.pkl','rb'))




